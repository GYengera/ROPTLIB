#include "Problems/StieSync/StieSync.h"

namespace ROPTLIB{

	StieSync::StieSync(double *inQ, integer inp, integer ind, integer inn)
	{
		Q = inQ;
		p = inp;
		d = ind;
		n = inn;
	};

	StieSync::~StieSync(void)
	{
	};

	StieSync::f(Variable *x) const
	{
		integer N = n, P = p, D = d, ND = n*d;
		const double *xxM = x->ObtainReadData();
		Vector *Qx = x->ConstructEmpty();
		SharedSpace *Temp = new SharedSpace(Qx);
		double *temp = Qx->ObtainWriteEntireData();
		double result = 0;
		
		// xxM^T \in St(d,p)^n, belongs to R_{p x dn}
		Matrix MQ(Q, ND, ND), MxxM(xxM, ND, P), Mtemp(temp, ND, P);
		//temp = MQ * MxxM
		Matrix::DGEMM(1, MQ, false, MxxM, false, 0, Mtemp);
		
		integer length = n * d * p;
		//output = xxM(:)^T * temp(:) = trace(xxM^T * temp) = trace(xxM^T * Q * xxM)
		result = ddot_(&length, const_cast<double *> (xxM), &GLOBAL::IONE, temp, &GLOBAL::IONE);
		if (UseGrad)
		{
			x->AddToTempData("Qx", Temp);
		}
		else
		{
			delete Temp;
		}
		return (result/2);
	};

	void StieSync::EucGrad(Variable *x, Vector *egf) const
	{
		const SharedSpace *Temp = x->ObtainReadTempData("Qx");
		Vector *Qx = Temp->GetSharedElement();
		Domain->ScaleTimesVector(x, 1.0, Qx, egf);
	};

	void StieSync::EucHessianEta(Variable *x, Vector *etax, Vector *exix) const
	{
		const double *etaxTV = etax->ObtainReadData();
		double *exixTV = exix->ObtainWriteEntireData();

		char *transn = const_cast<char *> ("n");
		integer N = n, P = p, D = d, ND = n*d;
		double one = 1, zero = 0;
		// exxiTV <- Q * etaxTV, details: http://www.netlib.org/lapack/explore-html/d7/d2b/dgemm_8f.html
		dgemm_(transn, transn, &ND, &P, &ND, &one, Q, &ND, const_cast<double *> (etaxTV), &ND, &zero, exixTV, &ND);
		Domain->ScaleTimesVector(x, 1.0, exix, exix);
	};
}; /*end of ROPTLIB namespace*/
